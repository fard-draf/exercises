// üéØ Exercice 2: Trait Objects + Lifetimes - Data Processor
// üìä Niveau: Medium
// ‚è±Ô∏è Dur√©e: 15min
//
// üìã MISSION COMPLETE:
// Cr√©er un syst√®me de processors avec trait objects qui peuvent traiter
// des donn√©es avec diff√©rentes lifetimes. Le processor doit pouvoir √™tre
// stock√© et utilis√© avec des r√©f√©rences temporaires.
//
// üì• ENTR√âES:
// - Trait DataProcessor<'a> avec m√©thode process(&self, data: &'a str) -> String
// - ProcessorBox pour stocker Box<dyn DataProcessor<'a> + 'a>
// - Impl√©mentations concr√®tes: UpperProcessor, LowerProcessor
//
// üì§ SORTIES:
// - ProcessorBox<'a> contenant trait object
// - process_data(&self, input: &'a str) -> String
// - Les processors transforment le texte selon leur r√®gle
//
// üìè R√àGLES M√âTIER:
// 1. UpperProcessor: convertit en MAJUSCULES
// 2. LowerProcessor: convertit en minuscules
// 3. ProcessorBox stocke ANY processor via trait object
// 4. La lifetime 'a lie les donn√©es d'entr√©e au processor
// 5. Retourne String owned (pas de lifetime dans output)
//
// üß™ EXEMPLES:
// let upper = UpperProcessor;
// let processor_box = ProcessorBox::new(Box::new(upper));
// assert_eq!(processor_box.process_data("Hello"), "HELLO");

// TODO: D√©finir trait avec lifetime parameter
trait DataProcessor<'a> {
    fn process(&self, data: &'a str) -> String;
}

// TODO: Impl√©menter UpperProcessor
struct UpperProcessor;

// TODO: Impl√©menter trait pour UpperProcessor
impl<'a> DataProcessor<'a> for UpperProcessor {
    fn process(&self, data: &'a str) -> String {
        data.to_uppercase()
    }
}

// TODO: Impl√©menter LowerProcessor
struct LowerProcessor;

// TODO: Impl√©menter trait pour LowerProcessor
impl<'a> DataProcessor<'a> for LowerProcessor {
    fn process(&self, data: &'a str) -> String {
        data.to_lowercase()
    }
}

// TODO: D√©finir ProcessorBox avec trait object + lifetime
struct ProcessorBox<'a> {
    processor: Box<dyn DataProcessor<'a> + 'a>,
}

impl<'a> ProcessorBox<'a> {
    // TODO: Constructeur qui accepte n'importe quel DataProcessor
    fn new(processor: Box<dyn DataProcessor<'a> + 'a>) -> Self {
        Self { processor }
    }

    // TODO: M√©thode qui d√©l√®gue au processor interne
    fn process_data(&self, input: &'a str) -> String {
        self.processor.process(input)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_upper_processor() {
        let upper = UpperProcessor;
        let processor_box = ProcessorBox::new(Box::new(upper));

        assert_eq!(processor_box.process_data("hello world"), "HELLO WORLD");
        assert_eq!(processor_box.process_data("Rust"), "RUST");
    }

    #[test]
    fn test_lower_processor() {
        let lower = LowerProcessor;
        let processor_box = ProcessorBox::new(Box::new(lower));

        assert_eq!(processor_box.process_data("HELLO WORLD"), "hello world");
        assert_eq!(processor_box.process_data("Rust"), "rust");
    }

    #[test]
    fn test_mixed_case() {
        let upper = UpperProcessor;
        let processor_box = ProcessorBox::new(Box::new(upper));

        assert_eq!(processor_box.process_data("CamelCase"), "CAMELCASE");
    }

    #[test]
    fn test_empty_string() {
        let lower = LowerProcessor;
        let processor_box = ProcessorBox::new(Box::new(lower));

        assert_eq!(processor_box.process_data(""), "");
    }
}
